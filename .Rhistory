print(inter_edge_summary)
print(bridge_summary)
print(sites_by_cluster)
View(edges_igraph)
View(g)
# Show node-level statistics
print(node_stats)
# Plot dendrogram with site codes as labels
plot(hc, labels = nodes$Site_Code, main = "Hierarchical Clustering of Sites by Motif Presence",
xlab = "Sites", sub = "", cex = 0.8)
# Number of clusters to cut tree into
k <- 4
# Add rectangles highlighting clusters
rect.hclust(hc, k = k, border = "grey80")
cluster_assignments <- cutree(hc, k = k)
# Define cluster levels and colors (adjust colors as needed)
cluster_levels <- c("1", "2", "3", "4", "5", "6")
cluster_colors <- c(
"5" = "#E41A1C",
"2" = "#377EB8",
"3" = "#4DAF4A",
"4" = "#984EA3",
"1" = "#21409A",
"6" = "#FFD33F"
)
# Cut dendrogram into k clusters and assign cluster memberships
cluster_groups <- cutree(hc, k = k)
# Print cluster assignment per site
print(cluster_groups)
# Create cluster dataframe and merge with nodes
cluster_df <- data.frame(Site_Code = names(cluster_assignments),
Cluster = factor(cluster_assignments))
nodes_clustered <- nodes %>%
left_join(cluster_df, by = "Site_Code")
#Network diagram
# Convert distance to similarity
jaccard_sim <- 1 - as.matrix(jaccard_dist)
# Build edge list with threshold (e.g. similarity > 0.5)
edges <- data.frame(
from = rep(rownames(jaccard_sim), times = nrow(jaccard_sim)),
to = rep(colnames(jaccard_sim), each = nrow(jaccard_sim)),
similarity = as.vector(jaccard_sim)
) %>%
filter(from != to & similarity > 0.5)
# Create network graph
g <- graph_from_data_frame(edges, directed = FALSE)
# Plot
plot(g, vertex.label = V(g)$name, edge.width = E(g)$similarity*5)
library(ggplot2)
library(ggrepel)
library(patchwork)
library(raster)
library(rnaturalearth)
# Load relief raster and Iran polygon
relief <- raster("NE2_HR_LC_SR_W.tif")
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
iran <- world %>% filter(name == "Iran")
relief_cropped <- crop(relief, extent(iran) + 1)
relief_df <- as.data.frame(rasterToPoints(relief_cropped))
colnames(relief_df) <- c("x", "y", "value")
nodes_clustered$Cluster <- factor(nodes_clustered$Cluster, levels = cluster_levels)
# Prepare edges with cluster info on 'from' and 'to' nodes
#edges_plot <- edges %>%
#  left_join(nodes_clustered %>% select(Site_Code, Long, Lat, Cluster), by = c("from" = "Site_Code")) %>%
#  rename(Long_from = Long, Lat_from = Lat, Cluster_from = Cluster) %>%
#  left_join(nodes_clustered %>% select(Site_Code, Long, Lat, Cluster), by = c("to" = "Site_Code")) %>%
#  rename(Long_to = Long, Lat_to = Lat, Cluster_to = Cluster)
#explicitly call dplyr to avoid masking conflicts in code above
edges_plot <- edges %>%
dplyr::left_join(
dplyr::select(nodes_clustered, Site_Code, Long, Lat, Cluster),
by = c("from" = "Site_Code")
) %>%
dplyr::rename(Long_from = Long, Lat_from = Lat, Cluster_from = Cluster) %>%
dplyr::left_join(
dplyr::select(nodes_clustered, Site_Code, Long, Lat, Cluster),
by = c("to" = "Site_Code")
) %>%
dplyr::rename(Long_to = Long, Lat_to = Lat, Cluster_to = Cluster)
edges_plot$Cluster_from <- factor(edges_plot$Cluster_from, levels = cluster_levels)
edges_plot$Cluster_to <- factor(edges_plot$Cluster_to, levels = cluster_levels)
# Create edge type to separate intra- and inter-cluster edges
edges_plot <- edges_plot %>%
mutate(edge_type = ifelse(Cluster_from == Cluster_to, "intra", "inter"))
View(edges_plot)
ggplot() +
geom_raster(data = relief_df, aes(x = x, y = y, fill = value), alpha = 0.4) +
scale_fill_gradient(low = "gray90", high = "gray50", guide = "none") +
geom_sf(data = iran, fill = NA, color = "black", size = 0.5) +
geom_point(
data = nodes_clustered,
aes(x = Long, y = Lat, color = Cluster),
size = 3,
position = position_jitter(width = 0.01, height = 0.01)
) +
geom_text_repel(
data = nodes_clustered,
aes(x = Long, y = Lat, label = Site_Code),
size = 3,
nudge_y = 0.05,
box.padding = 0.5,
point.padding = 0.5,
segment.size = 0.5,
segment.color = "grey50",
min.segment.length = 0,
max.overlaps = Inf
) +
coord_sf(xlim = c(51.3, 53.7), ylim = c(29, 31), expand = FALSE) +
scale_color_manual(values = cluster_colors, drop = FALSE) +
labs(color = "Cluster") +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot() +
geom_segment(
data = edges_plot %>% filter(edge_type == "inter"),
aes(x = Long_from, y = Lat_from, xend = Long_to, yend = Lat_to),
color = "grey70",
alpha = 0.5
) +
geom_segment(
data = edges_plot %>% filter(edge_type == "intra"),
aes(x = Long_from, y = Lat_from, xend = Long_to, yend = Lat_to, color = Cluster_from),
alpha = 0.7
) +
geom_point(
data = nodes_clustered,
aes(x = Long, y = Lat, color = Cluster),
size = 4
) +
geom_label_repel(
data = nodes_clustered,
aes(x = Long, y = Lat, label = Site_Code, color = Cluster),
fill = "white",
box.padding = 0.4,
segment.color = 'grey50',
size = 3
) +
scale_color_manual(values = cluster_colors, drop = FALSE) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
cluster_colors <- c(
"1" = "#E41A1C",
"2" = "#377EB8",
"3" = "#4DAF4A",
"4" = "#984EA3",
"5" = "#21409A",
"6" = "#FFD33F"
)
ggplot() +
geom_segment(
data = edges_plot %>% filter(edge_type == "inter"),
aes(x = Long_from, y = Lat_from, xend = Long_to, yend = Lat_to),
color = "grey70",
alpha = 0.5
) +
geom_segment(
data = edges_plot %>% filter(edge_type == "intra"),
aes(x = Long_from, y = Lat_from, xend = Long_to, yend = Lat_to, color = Cluster_from),
alpha = 0.7
) +
geom_point(
data = nodes_clustered,
aes(x = Long, y = Lat, color = Cluster),
size = 4
) +
geom_label_repel(
data = nodes_clustered,
aes(x = Long, y = Lat, label = Site_Code, color = Cluster),
fill = "white",
box.padding = 0.4,
segment.color = 'grey50',
size = 3
) +
scale_color_manual(values = cluster_colors, drop = FALSE) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
cluster_colors <- c(
"2" = "#E41A1C",
"5" = "#377EB8",
"3" = "#4DAF4A",
"4" = "#984EA3",
"1" = "#21409A",
"6" = "#FFD33F"
)
ggplot() +
geom_segment(
data = edges_plot %>% filter(edge_type == "inter"),
aes(x = Long_from, y = Lat_from, xend = Long_to, yend = Lat_to),
color = "grey70",
alpha = 0.5
) +
geom_segment(
data = edges_plot %>% filter(edge_type == "intra"),
aes(x = Long_from, y = Lat_from, xend = Long_to, yend = Lat_to, color = Cluster_from),
alpha = 0.7
) +
geom_point(
data = nodes_clustered,
aes(x = Long, y = Lat, color = Cluster),
size = 4
) +
geom_label_repel(
data = nodes_clustered,
aes(x = Long, y = Lat, label = Site_Code, color = Cluster),
fill = "white",
box.padding = 0.4,
segment.color = 'grey50',
size = 3
) +
scale_color_manual(values = cluster_colors, drop = FALSE) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
sites_by_cluster <- nodes_clustered %>%
group_by(Cluster) %>%
summarize(Sites = paste(Site_Code, collapse = ", ")) %>%
arrange(Cluster)
print(sites_by_cluster)
edges_igraph <- edges %>%
dplyr::select(from, to)
# Create igraph object, undirected network
g <- graph_from_data_frame(d = edges_igraph, vertices = nodes_clustered, directed = FALSE)
# Compute node-level metrics
degree_cent <- degree(g)
betweenness_cent <- betweenness(g, normalized = TRUE)
closeness_cent <- closeness(g)
# Compute network-level metrics
density_val <- edge_density(g)
avg_path_len <- average.path.length(g)
deg_dist <- degree_distribution(g)
# Optional: community detection (Louvain method)
comm <- cluster_louvain(g)
mod_score <- modularity(comm)
membership_vec <- membership(comm)
# Create summary dataframe with key stats per site (node)
node_stats <- data.frame(
Site_Code = V(g)$name,
Degree = degree_cent,
Betweenness = betweenness_cent,
Closeness = closeness_cent,
Cluster_Louvain = as.vector(membership_vec)  # convert membership to vector
)
# Print overall network stats
cat("Network density:", density_val, "\n")
cat("Average path length:", avg_path_len, "\n")
cat("Modularity (Louvain):", mod_score, "\n")
# Show node-level statistics
print(node_stats)
node_stats <- node_stats %>%
arrange(desc(Degree), desc(Betweenness))
# Print overall network stats
cat("Network density:", density_val, "\n")
cat("Average path length:", avg_path_len, "\n")
cat("Modularity (Louvain):", mod_score, "\n")
# Show node-level statistics
print(node_stats)
library(dplyr)
# Assuming edges_plot already contains these columns:
# from, to, Cluster_from, Cluster_to
# Identify inter-cluster edges
inter_cluster_edges <- edges_plot %>% filter(Cluster_from != Cluster_to)
# Summary 1: Count of inter-cluster edges by cluster pair
inter_edge_summary <- inter_cluster_edges %>%
count(Cluster_from, Cluster_to, name = "EdgeCount") %>%
arrange(desc(EdgeCount))
# Summary 2: Nodes acting as 'bridges' (sites with high inter-cluster degree)
bridge_from <- inter_cluster_edges %>% count(from, name = 'From_Bridge_Degree')
bridge_to <- inter_cluster_edges %>% count(to, name = 'To_Bridge_Degree')
bridge_summary <- full_join(bridge_from, bridge_to, by = c('from' = 'to')) %>%
mutate(Bridge_Degree = coalesce(From_Bridge_Degree, 0) + coalesce(To_Bridge_Degree, 0)) %>%
rename(Site_Code = from) %>%
arrange(desc(Bridge_Degree))
# Print results for interpretation
print(inter_edge_summary)
print(bridge_summary)
# Plot dendrogram with site codes as labels
plot(hc, labels = nodes$Site_Code, main = "Hierarchical Clustering of Sites by Motif Presence",
xlab = "Sites", sub = "", cex = 0.8)
# Add rectangles highlighting clusters
rect.hclust(hc, k = k, border = "grey80")
# Plot
plot(g, vertex.label = V(g)$name, edge.width = E(g)$similarity*5)
p1 <- ggplot() +
geom_raster(data = relief_df, aes(x = x, y = y, fill = value), alpha = 0.4) +
scale_fill_gradient(low = "gray90", high = "gray50", guide = "none") +
geom_sf(data = iran, fill = NA, color = "black", size = 0.5) +
geom_point(
data = nodes_clustered,
aes(x = Long, y = Lat, color = Cluster),
size = 3,
position = position_jitter(width = 0.01, height = 0.01)
) +
geom_text_repel(
data = nodes_clustered,
aes(x = Long, y = Lat, label = Site_Code),
size = 3,
nudge_y = 0.05,
box.padding = 0.5,
point.padding = 0.5,
segment.size = 0.5,
segment.color = "grey50",
min.segment.length = 0,
max.overlaps = Inf
) +
coord_sf(xlim = c(51.3, 53.7), ylim = c(29, 31), expand = FALSE) +
scale_color_manual(values = cluster_colors, drop = FALSE) +
labs(color = "Cluster") +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
# Plot 2: Network edges and nodes with intra/inter cluster edge distinction
p2 <- ggplot() +
geom_segment(
data = edges_plot %>% filter(edge_type == "inter"),
aes(x = Long_from, y = Lat_from, xend = Long_to, yend = Lat_to),
color = "grey70",
alpha = 0.5
) +
geom_segment(
data = edges_plot %>% filter(edge_type == "intra"),
aes(x = Long_from, y = Lat_from, xend = Long_to, yend = Lat_to, color = Cluster_from),
alpha = 0.7
) +
geom_point(
data = nodes_clustered,
aes(x = Long, y = Lat, color = Cluster),
size = 4
) +
geom_label_repel(
data = nodes_clustered,
aes(x = Long, y = Lat, label = Site_Code, color = Cluster),
fill = "white",
box.padding = 0.4,
segment.color = 'grey50',
size = 3
) +
scale_color_manual(values = cluster_colors, drop = FALSE) +
theme_minimal() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
p1
p2
# Hierarchical clustering with different methods
hc_complete <- hclust(jaccard_dist, method = "complete")
hc_average <- hclust(jaccard_dist, method = "average")
hc_ward <- hclust(jaccard_dist, method = "ward.D2")
# Calculate cophenetic correlations
cc_complete <- cor(jaccard_dist, cophenetic(hc_complete))
cc_average <- cor(jaccard_dist, cophenetic(hc_average))
cc_ward <- cor(jaccard_dist, cophenetic(hc_ward))
cat("Cophenetic correlation (Complete):", cc_complete, "\n")
cat("Cophenetic correlation (Average):", cc_average, "\n")
cat("Cophenetic correlation (Ward):", cc_ward, "\n")
# Optional: Plot dendrograms side by side for visual inspection
dend_data_complete <- ggdendrogram(hc_complete, rotate = FALSE)
dend_data_average <- ggdendrogram(hc_average, rotate = FALSE)
dend_data_ward <- ggdendrogram(hc_ward, rotate = FALSE)
# Plot function for ggplot2 dendrogram
plot_dendrogram <- function(hc, title) {
ggdend <- ggdendrogram(hc)
ggdend + ggtitle(title) + theme_minimal() + theme(axis.text.x = element_text(angle = 90))
}
# Print dendrograms (adjust plotting layout as needed)
plot_dendrogram(hc_complete, "Complete Linkage")
plot_dendrogram(hc_average, "Average Linkage")
plot_dendrogram(hc_ward, "Ward's Method")
library(ggdendro)
# Hierarchical clustering with different methods
hc_complete <- hclust(jaccard_dist, method = "complete")
hc_average <- hclust(jaccard_dist, method = "average")
hc_ward <- hclust(jaccard_dist, method = "ward.D2")
# Calculate cophenetic correlations
cc_complete <- cor(jaccard_dist, cophenetic(hc_complete))
cc_average <- cor(jaccard_dist, cophenetic(hc_average))
cc_ward <- cor(jaccard_dist, cophenetic(hc_ward))
cat("Cophenetic correlation (Complete):", cc_complete, "\n")
cat("Cophenetic correlation (Average):", cc_average, "\n")
cat("Cophenetic correlation (Ward):", cc_ward, "\n")
# Optional: Plot dendrograms side by side for visual inspection
dend_data_complete <- ggdendrogram(hc_complete, rotate = FALSE)
dend_data_average <- ggdendrogram(hc_average, rotate = FALSE)
dend_data_ward <- ggdendrogram(hc_ward, rotate = FALSE)
# Plot function for ggplot2 dendrogram
plot_dendrogram <- function(hc, title) {
ggdend <- ggdendrogram(hc)
ggdend + ggtitle(title) + theme_minimal() + theme(axis.text.x = element_text(angle = 90))
}
# Print dendrograms (adjust plotting layout as needed)
plot_dendrogram(hc_complete, "Complete Linkage")
plot_dendrogram(hc_average, "Average Linkage")
plot_dendrogram(hc_ward, "Ward's Method")
# Load calibrated dataset
rc_data_bc <- read.csv("Radiocarbon-dates.csv")
# Clean Site_Name for consistency
rc_data_bc <- rc_data_bc %>%
mutate(Site_Name = trimws(Site))
# Compute the earliest calibrated date (max Start_BC) per site for ordering
site_order_bc <- rc_data_bc %>%
group_by(Site_Name) %>%
summarise(site_earliest_bc = max(Start_BC, na.rm = TRUE)) %>%
arrange(desc(site_earliest_bc))
# Extract ordered site names
ordered_sites_bc <- site_order_bc$Site_Name
# Factor Site_Name with explicit ordering
rc_data_bc <- rc_data_bc %>%
mutate(Site_Name = factor(Site_Name, levels = ordered_sites_bc))
rc_data_bc <- rc_data_bc %>%
mutate(PPN_flag = ifelse(grepl("PPN", Phase_Level, ignore.case = TRUE), "PPN", "PN"))
# Define custom breaks for y-axis
y_breaks <- seq(from = min(rc_data_bc$End_BC, na.rm = TRUE),
to = max(rc_data_bc$Start_BC, na.rm = TRUE),
by = 200)  # every 200 years, adjust as needed
ggplot(rc_data_bc, aes(x = Site_Name, color = PPN_flag)) +
geom_point(aes(y = Start_BC), size = 1) +
geom_errorbar(aes(ymin = End_BC, ymax = Start_BC), width = 0.3) +
scale_y_reverse(breaks = y_breaks) +
scale_color_manual(values = c("PPN" = "#E41A1C", "PN" = "#21409A")) +
theme_minimal() +
labs(
title = "Calibrated Date Ranges by Site",
x = "",
y = "Calibrated Dates (BCE)",
color = "Period"
)
# Load calibrated dataset
rc_data_bc <- read.csv("Radiocarbon-dates.csv")
# Clean Site_Name for consistency
rc_data_bc <- rc_data_bc %>%
mutate(Site_Name = trimws(Site))
# Compute the earliest calibrated date (max Start_BC) per site for ordering
site_order_bc <- rc_data_bc %>%
group_by(Site_Name) %>%
summarise(site_earliest_bc = max(Start_BC, na.rm = TRUE)) %>%
arrange(desc(site_earliest_bc))
# Extract ordered site names
ordered_sites_bc <- site_order_bc$Site_Name
# Factor Site_Name with explicit ordering
rc_data_bc <- rc_data_bc %>%
mutate(Site_Name = factor(Site_Name, levels = ordered_sites_bc))
rc_data_bc <- rc_data_bc %>%
mutate(PPN_flag = ifelse(grepl("PPN", Phase_Level, ignore.case = TRUE), "PPN", "PN"))
# Define custom breaks for y-axis
y_breaks <- seq(from = min(rc_data_bc$End_BC, na.rm = TRUE),
to = max(rc_data_bc$Start_BC, na.rm = TRUE),
by = 200)  # every 200 years, adjust as needed
ggplot(rc_data_bc, aes(x = Site_Name, color = PPN_flag)) +
geom_point(aes(y = Start_BC), size = 1) +
geom_errorbar(aes(ymin = End_BC, ymax = Start_BC), width = 0.3) +
scale_y_reverse(breaks = y_breaks) +
scale_color_manual(values = c("PPN" = "#E41A1C", "PN" = "#21409A")) +
theme_minimal() +
labs(
title = "Calibrated Date Ranges by Site",
x = "",
y = "Calibrated Dates (BCE)",
color = "Period"
)
# Load calibrated dataset
rc_data_bc <- read.csv("Radiocarbon-dates.csv")
# Clean Site_Name for consistency
rc_data_bc <- rc_data_bc %>%
mutate(Site_Name = trimws(Site))
# Compute the earliest calibrated date (max Start_BC) per site for ordering
site_order_bc <- rc_data_bc %>%
group_by(Site_Name) %>%
summarise(site_earliest_bc = max(Start_BC, na.rm = TRUE)) %>%
arrange(desc(site_earliest_bc))
# Extract ordered site names
ordered_sites_bc <- site_order_bc$Site_Name
# Factor Site_Name with explicit ordering
rc_data_bc <- rc_data_bc %>%
mutate(Site_Name = factor(Site_Name, levels = ordered_sites_bc))
rc_data_bc <- rc_data_bc %>%
mutate(PPN_flag = ifelse(grepl("PPN", Phase_Level, ignore.case = TRUE), "PPN", "PN"))
# Define custom breaks for y-axis
y_breaks <- seq(from = min(rc_data_bc$End_BC, na.rm = TRUE),
to = max(rc_data_bc$Start_BC, na.rm = TRUE),
by = 200)  # every 200 years, adjust as needed
ggplot(rc_data_bc, aes(x = Site_Name, color = PPN_flag)) +
geom_point(aes(y = Start_BC), size = 1) +
geom_errorbar(aes(ymin = End_BC, ymax = Start_BC), width = 0.3) +
scale_y_reverse(breaks = y_breaks) +
scale_color_manual(values = c("PPN" = "#E41A1C", "PN" = "#21409A")) +
theme_minimal() +
labs(
title = "Calibrated Date Ranges by Site",
x = "",
y = "Calibrated Dates (BCE)",
color = "Period"
)
View(rc_data_bc)
